# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  CI:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
#         mongodb-version: ['4.2']

    steps:
      - uses: actions/checkout@v2
        with:
          ref: main

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
#       - name: Start MongoDB
#         uses: supercharge/mongodb-github-action@1.7.0
#         with:
#           mongodb-version: ${{ matrix.mongodb-version }}
      - name: Install dependencies  
        run: |
             npm ci 
             npm install
#             npm install passport
#             npm install stripe
#       - run: npm run build --if-present
        
      - run: npm test
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
 
      - name: Build and push to DockerHub
        if: success()
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: kao22013/shopping-cart-web:latest
  CD:
    needs: [CI]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./script

    steps:
      - uses: actions/checkout@v2
      - run: ls
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create EC2 and deploy application to EC2
        if: success()
        env:
          KEY_PAIR_NAME: ${{ secrets.AWS_KEYPAIR_NAME }}
          SECGROUP_ID: ${{ secrets.AWS_SECGROUP_ID }}
        run: aws ec2 run-instances --image-id ami-0ed9277fb7eb570c9 --instance-type t2.micro  --key-name $KEY_PAIR_NAME --security-group-ids $SECGROUP_ID --user-data file://user_data_script.txt
